from Cryptodome.Util.number import *
import os
from sympy import *
from tqdm import tqdm
#from secret import flag

class LaSeine:
    def __init__(self, size):
        self.l = 20
        self.p = 179358513830906148619403250482250880334528756349120678091666297907253922185623290723862265402777434007178297319701286775733620488613530869850160450412929764046707392082705800333548316425165863556480623955587411083384086805686199851628022437853672200835000268893800610064747558825805271528526924659142504913631
        self.k = 929384

        #self.a = getRandomNBitInteger(size // 16)
        #self.b = getRandomNBitInteger(size // 16)

        self.a = 9252711297286595553
        #self.a = 87192197194403655560657773807161270553788901798626035383106311946845532500606980079976652258331075223793641406739495377018902845755064739959132209780498826016553869961141651367478482406722638786523893981103538155481287344474156155251190870028679494679893096998942273782728829663473962969160048471385318988292
        self.b = 17391323320741627026
        #self.b = 0

    def split(self, f):
        if len(f) & 1:
            f += b"\x00"
        h = len(f) // 2
        return (bytes_to_long(f[:h]), bytes_to_long(f[h:]))
    
    


    def sign(self, m, b):
        #xn, yn = pow(31327893549755863435091057018001364047001550123167466763978088560,-84481155843950229286811547155107605238450895610594644138465638356120355204092299241985588115175717198360139018706147196522040205871756521497217331657986147558302658248768493827955326017735342159661723618815646016619521686141939592384268890838290528489605326668554566216586540691932071466029934333877336101809,seine.p),40086879903454460763941169874842683273969554387005198761777587497
        xn, yn = self.split(m)
        #k = (getRandomNBitInteger(self.l - 1) << 1) + b

        for _ in range(self.k):
            xnp1 = (self.a*xn + self.b*yn) % self.p
            ynp1 = (self.b*xn - self.a*yn) % self.p

            xn, yn = xnp1, ynp1
        return (self.k, xn, yn)
    
def merge(n1, n2):
    return long_to_bytes(n1) + long_to_bytes(n2)
    
def modular_sqrt(a, p):
    assert (p % 4 == 3) and (a % p != 0)
    r = pow(a, (p + 1) // 4, p)
    return r

seine = LaSeine(1024)

#_, xf, yf = seine.sign(flag, 1)
s2 = seine.sign(b"L'eau est vraiment froide par ici (et pas tres propre)", 0)
xni = 87192197194403655560657773807161270553788901798626035383106311946845532500606980079976652258331075223793641406739495377018902845755064739959132209780498826016553869961141651367478482406722638786523893981103538155481287344474156155251190870028679494679893096998942273782728829663473962969160048471385318988292
yni = 163553140200782420295951499475124354618080519190768643071531681249345068332998487490689101108456514594180004694992542744859542690266077688947731842719967857681698437363511767950956458138539232175051257550530976154794313189211629953414804425694664496356108559979351644857479169716361222648296301261021962985050
xn1,yn1 = 31327893549755863435091057018001364047001550123167466763978088560,40086879903454460763941169874842683273969554387005198761777587497

xniv = 118454610237220659897316062413105144789761952332893713333891996727204456010112572423850661749643268291339194773488138402728325770671625196790011560475297285424138262812704729573910897903628228179414627406601128765472041473647769084599481166191241495167773352105622894240398746332477947478817552973851804951566
yniv = 65891615565820497528921288257089595342791556688007325193257144738940922602117787746412089423500836495505254334866586155889060897532850381510520943387446058037766901712521471259853536310481267471645770625452422081411718151580380288380630522313377397166067417623947500542258985636659962524606869196898543973764


print('xn_rec',xn1*pow((seine.a ** 2 + seine.b**2),seine.k//2,seine.p)%seine.p)
k_inv = pow(seine.k,-1,seine.p)
print('a2_b2_k',pow(3835459719**2+ 3236970859**2,seine.k,seine.p))
print(modular_sqrt(pow(3835459719**2+ 3236970859**2,seine.k,seine.p),seine.p))
print('test a2 b2',(pow(xn1,-2,seine.p)*xniv**2%seine.p))
print('test a2 b2',(pow(yn1,-2,seine.p)*yni**2%seine.p))
print(factorint(seine.k))
print('s2',s2)
#f = open("out.txt", "w")

#f.write(str(seine.p) + "\n")
#f.write(str((xf, yf)) + "\n")
#f.write(str(s2))

#f.close()


def mod_inverse(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1

def mod_exp(base, exp, modulus):
    result = 1
    base = base % modulus
    while exp > 0:
        if exp % 2 == 1:
            result = (result * base) % modulus
        exp = exp // 2
        base = (base * base) % modulus
    return result

def mod_cbrt(a, p):
    if p == 2:
        return a % p
    else:
        phi = p - 1
        d = mod_inverse(154897, phi)
        return mod_exp(a, d, p)


a2_b2_kv   = 132036117704306151176320800580024636572637008951549696141842447652400458035248641557244509549164851799772864724896728519234041271495380507016050948480268732076441555865508843996330147618894971761526303030547282026205195804868404113877825940343503477304186027032582974127812649933876583306406012111932430698828

a2_b2_k_2v  = 146302614110156708622432421061434755001785612894551707645370931240860498599588585094920394945856400050450267744090468101739841551816457167514883147681523474671723586032702767056810499992432868718847586460620936916445615594663408653907883623388841328595077918949965202483450706396111634462369248345075573583170 

a2_b2_k_2v1 = 33055899720749439996970829420816125332743143454568970446295366666393423586034705628941870456921033956728029575610818673993778936797073702335277302731406289374983806050003033276737816432732994837633037494966474166938471211022791197720138814464830872239922349943835407581296852429693637066157676314066931330461

a2_b2_3v  = 58443050307322889160406060479103354390788946809005766403060368878979010850846999710018823136392106439159150775584125

a2_b2_2v = 150598940532941909363055139580300322265165777167634854214277850936612590835225

a2_b2v = 388070793197506567215490364778692980485

a2_b2_6v = 3415590129224274049139497027665751456480834155974080208347055966990811980151322017127222529726969025445132796800618792372853894955483486217151539000782450834500812240528947324866549468859842212224219737414087766730778518234952015625

nombre = a2_b2_k_2v1
p = seine.p

racine_cubique_modulo_p = mod_cbrt(nombre, p)
print("Racine cubique de", nombre, "modulo", p, ":", racine_cubique_modulo_p)
print('oue',modular_sqrt(nombre,seine.p))
#print(pow(3835459719**2+ 3236970859**2,2,seine.p))
xn1sec = 151683403543233106224623577311980037274441590153911847119566701699367001537936290730922138442040542620222943385810242081949211326676472369180020899628646165132503185978510932501521730827126356422842852151275382840062708701174847422687809816503983740455064453231285796998931373590630224653066573035583863902921
yn1sec = 76688287388975729010764722746414768266232185597001389966088556498895611351239273625106383329192109917896575986761053032041287081527278426860237114874927478625771306887851752909713110684616229318569024945188998933167888234990912716799093707141023542980852524005127986940863843004517549295449194995101172400759

print('####################################################################')
a = 13472728406892388146
b = 14372069526398119263
xn1sec_1 = (a*xn1sec + b*yn1sec)%seine.p
yn1sec_1 = (b*xn1sec - a*yn1sec)%seine.p
print(xn1*(pow(a**2+b**2,seine.k//2,seine.p))%seine.p)
print(yn1*(pow(a**2+b**2,seine.k//2,seine.p))%seine.p)
print(xn1*a2_b2_2v)
print(yn1*a2_b2v**2)
print(xni%xn1)
print('test',pow(a2_b2v,-(seine.k//2 ),seine.p)*s2[1]%seine.p)
print('test',pow(a2_b2v,-(seine.k//2 ),seine.p)*s2[2]%seine.p)
print(merge(xn1,yn1))

def est_ascii_imprimable(chaine_bytes):
    for octet in chaine_bytes:
        if (not 32 <= octet <= 126) or not octet == 0:
            return False
    return True
print(len(b"L'eau est vraiment froide par ici (et pas tres propre)!"))
test_1 = seine.split(b"L'eau est vraiment froide par ici (et pas tres propre)!")
def sign():
    #xn, yn = pow(31327893549755863435091057018001364047001550123167466763978088560,-84481155843950229286811547155107605238450895610594644138465638356120355204092299241985588115175717198360139018706147196522040205871756521497217331657986147558302658248768493827955326017735342159661723618815646016619521686141939592384268890838290528489605326668554566216586540691932071466029934333877336101809,seine.p),40086879903454460763941169874842683273969554387005198761777587497
    xn1sec1 = 151683403543233106224623577311980037274441590153911847119566701699367001537936290730922138442040542620222943385810242081949211326676472369180020899628646165132503185978510932501521730827126356422842852151275382840062708701174847422687809816503983740455064453231285796998931373590630224653066573035583863902921
    yn1sec1 = 76688287388975729010764722746414768266232185597001389966088556498895611351239273625106383329192109917896575986761053032041287081527278426860237114874927478625771306887851752909713110684616229318569024945188998933167888234990912716799093707141023542980852524005127986940863843004517549295449194995101172400759
    b1 = 13472728406892388146
    a1 = 14372069526398119263   

    for k in tqdm(range(2**18,2**19)):
        k1 = (k << 1) 
        res1 = (pow(a2_b2v,-(k1//2),seine.p)*((a1*xn1sec1 + b1*yn1sec1)%seine.p))%seine.p
        res2 = (pow(a2_b2v,-(k1//2),seine.p)*((a1*yn1sec1 - b1*xn1sec1)%seine.p))%seine.p
        b = merge(res1,res2)
        if est_ascii_imprimable(b) or b.startswith(b"404"):
            print(b,k1)
    return 0

print(sign())